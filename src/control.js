import readlineSync from 'readline-sync';

import { STATE, paginate, cols } from './variables.js';

/**
 * Manage the different options of the program.
 * Quit, Next, Previous, First page, Last page, All entries, Search
 */
export function control() {
    console.log(`${paginate.page} - ${paginate.totalPages} (${paginate.total}) ${paginate.message}\n`);
    console.log('= OPTIONS ==============================');
    console.log('\x1b[38;2;128;128;128;128m%s\x1b[0m', '\'*\' mean not done yet');
    console.log('[F]irst / [N]ext / [P]revious / [L]ast');
    console.log('[A]ll data / [S]earch')
    console.log('[Q]uit\n');
    let input = readlineSync.question(` > `);

    paginate.message = '';
    STATE.CURRENT = STATE.LIST;

    //switch to control the actions of the program
    switch (input.toUpperCase()) {
        case 'Q':
            STATE.CURRENT = STATE.QUIT;
            break;

        case 'N':
            if (paginate.page != paginate.totalPages || paginate.full) {
                paginate.page++;
                paginate.first += paginate.limit;
                paginate.last += paginate.limit;
                paginate.full = false;
            } else {
                paginate.message = 'Already on last page';
            }
            break;

        case 'P':
            if (paginate.page != 1 || paginate.full) {
                paginate.page--;
                paginate.first -= paginate.limit;
                paginate.last -= paginate.limit;
                paginate.full = false;
            } else {
                paginate.message = 'Already on first page';
            }
            break;

        case 'L':
            if (paginate.page != paginate.totalPages || paginate.full) {
                paginate.page = paginate.totalPages;
                paginate.first = paginate.totalPages * paginate.limit - paginate.limit;
                paginate.last = paginate.total;
                paginate.full = false;
            } else {
                paginate.message = 'Already on last page';
            }
            break;

        case 'F':
            if (paginate.page != 1 || paginate.full) {
                paginate.page = 1;
                paginate.first = 1;
                paginate.last = 10;
                paginate.full = false;
            } else {
                paginate.message = 'Already on first page';
            }
            break;

        case 'A':
            if (!paginate.full) {
                paginate.page = 1;
                paginate.first = 1;
                paginate.last = paginate.total;
                paginate.full = true;
            } else {
                paginate.message = 'Already seeing all entries';
            }
            break;

        case 'S':
            paginate.search.state = true;
            console.log('\nColumns: ');
            cols.value.forEach((col, i) => {
                console.log(`  ${i} - ${col}`, i === 0 ? '\x1b[38;2;128;128;128;128m(Generated by program)\x1b[0m' : '');
            });

            console.log('\nColumn number: ');
            paginate.search.column = readlineSync.question(' > ');
            console.log('\nValue to search: ');
            paginate.search.value = readlineSync.question(' > ');

            break;

        default:
            paginate.message = 'Invalid input';
            break;
    }
}

/**
 * Clear the console
 */
export function clear() {
    process.stdout.write('\x1Bc');
}
